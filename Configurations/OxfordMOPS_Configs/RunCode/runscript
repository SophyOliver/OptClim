#!/bin/bash

# This is your "black box" model.
# If this runscript script were to be placed in a brand new, empty folder, then it should be able
# to be run (or submitted to computing cluster) and successfully complete one full evalutation of
# the black box model, by (1) containing cluster-specific commands for job submission, 
# (2) copying all the necessary files into the folder, (3) loading all necessary 
# modules/packages, (4) reading in a list of parameter values to set in the module, (5) running the model,
# (6) calculating the misfit between the model output and observations, and (7) writing a list of misfit values.

# If applying the optimiser CMA-ES, then this "black box" runscript should run your model lambda times (lambda = population size chosen for cma-es)
# It should read in parameters_inputs_X.txt and write misfit_output_X.txt, where X=1...lambda.
# This can be done as a job array on most clusters

# Step 1. Computing cluster job submission commands. e.g.
#SBATCH --nodes=6
#SBATCH --ntasks-per-node=16
#SBATCH --time=20:00:00

# Step 2. Copy necessary files to run the model e.g.
# Create a soft link to all the large files (e.g. initial conditions, transport matrices, etc) so that you don't use up all your storage space during one optimisation
ln -s $OPTCLIM/Configurations/OxfordMOPS_Configs/ReadOnlyFiles/Files/* .
# Create a hard copy of the model code (already compiled) as these shouldn't be large files.
cp -p $OPTCLIM/Configurations/OxfordMOPS_Configs/ReadOnlyFiles/Code/* .
# If the files take a while to copy, give this time to finish copying the files over before your runscript goes on to run the model, e.g.
sleep 300

# Step 3. Load any necessary modules needed for the model

# Step 4: Read in "parameters_input.txt" (which optclim will write in every iteration of the optimisation) and set those parameter values in the model

# Step 5: Run the model with those specified parameter values

# Step 6: From the model outputs, calculate your misfits

# Step 7: Write out "misfit_output.txt" (which optclim will then read in every iteration of the optimisation)

# Example model run for MOPS:

mpirun $MPI_HOSTS ./mops \
        -numtracers 9 \
        -i po4ini.petsc,dopini.petsc,oxyini.petsc,phyini.petsc,zooini.petsc,detini.petsc,no3ini.petsc,dicini.petsc,alkini.petsc \
        -me Ae \
        -mi Ai \
        -t0 0.0 -iter0 0 \
        -deltat_clock 0.0013888888888889 \
        -max_steps 2160000 \
        -write_steps 72000 \
        -o po4.petsc,dop.petsc,oxy.petsc,phy.petsc,zoo.petsc,det.petsc,no3.petsc,dic.petsc,alk.petsc \
        -external_forcing \
        -use_profiles \
        -nzeuph 2 \
        -biogeochem_deltat 43200.0 \
        -burial_sum_steps 720 \
        -calc_misfit -misfit_file misfit_output_all.txt -average_cost -cost_start_time_step 71281 -cost_time_steps 720 -cost_start_time_step_reset_freq 72000 \
                -periodic_matrix -matrix_cycle_period 1.0 \
                -matrix_cycle_step 0.0833333333333333 \
                -periodic_biogeochem_forcing \
                -periodic_biogeochem_cycle_period 1.0 \
                -periodic_biogeochem_cycle_step 0.08333333333333 \
                -num_biogeochem_steps_per_ocean_step 8 \
        -bgc_params_file parameters_input.txt -bgc_paramnames_file parameters_names.txt -num_bgc_params_file num_bgc_params.txt \
        -separate_biogeochem_time_stepping \
        -time_avg -avg_start_time_step 71281 -avg_time_steps 720 -avg_start_time_step_reset_freq 72000 \
        -avg_files po4avg.petsc,dopavg.petsc,oxyavg.petsc,phyavg.petsc,zooavg.petsc,detavg.petsc,no3avg.petsc,dicavg.petsc,alkavg.petsc \
        -calc_diagnostics -diag_start_time_step 71281 -diag_time_steps 720 -diag_start_time_step_reset_freq 72000 \
        -diag_files fbgc1.petsc,fbgc2.petsc,fbgc3.petsc,fbgc4.petsc,fbgc5.petsc,fbgc6.petsc,fbgc7.petsc \
        -mask_files PO4_amask.petsc,O2_amask.petsc,NO3_amask.petsc \
        -obs_files twin_p_MITgcm_Vn2.petsc,twin_o_MITgcm_Vn2.petsc,twin_n_MITgcm_Vn2.petsc \
        -num_mask_regions 19,19,19 \
        > log 
        
# Save final year misfit values into a separate file
tail -n 58 misfit_output_all.txt > misfit_output.txt
